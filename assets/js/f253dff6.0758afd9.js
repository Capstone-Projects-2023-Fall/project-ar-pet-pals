"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[9937],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var o=n.createContext({}),c=function(e){var t=n.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(o.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(r),h=a,m=p["".concat(o,".").concat(h)]||p[h]||d[h]||i;return r?n.createElement(m,s(s({ref:t},u),{},{components:r})):n.createElement(m,s({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,s=new Array(i);s[0]=h;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[p]="string"==typeof e?e:a,s[1]=l;for(var c=2;c<i;c++)s[c]=r[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},1261:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const i={sidebar_position:5},s="Table Design",l={unversionedId:"system-architecture/table-design",id:"system-architecture/table-design",title:"Table Design",description:"User",source:"@site/docs/system-architecture/table-design.md",sourceDirName:"system-architecture",slug:"/system-architecture/table-design",permalink:"/project-ar-pet-pals/docs/system-architecture/table-design",draft:!1,editUrl:"https://github.com/Capstone-Projects-2023-Fall/project-ar-pet-pals/edit/main/documentation/docs/system-architecture/table-design.md",tags:[],version:"current",lastUpdatedBy:"Anya Tewari",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"docsSidebar",previous:{title:"Algorithm Overview",permalink:"/project-ar-pet-pals/docs/system-architecture/algorithm-overview"},next:{title:"ER Diagrams",permalink:"/project-ar-pet-pals/docs/system-architecture/er-diagrams"}},o={},c=[{value:"User",id:"user",level:2},{value:"PetPal",id:"petpal",level:2},{value:"PetHealthInfo",id:"pethealthinfo",level:2},{value:"Task",id:"task",level:2},{value:"PhysicalActivity",id:"physicalactivity",level:2},{value:"NutritionInfo",id:"nutritioninfo",level:2}],u={toc:c};function p(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"table-design"},"Table Design"),(0,a.kt)("h2",{id:"user"},"User"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"UserID: Unique identifier assigned to each user of the app."),(0,a.kt)("li",{parentName:"ul"},"Username: Represents the user\u2019s chosen display name."),(0,a.kt)("li",{parentName:"ul"},"Password: Encrypted string used for authenticating the user during login."),(0,a.kt)("li",{parentName:"ul"},"Date_joined: Timestamp noting when the user joined or created an account."),(0,a.kt)("li",{parentName:"ul"},"leaderboard_ranking: The user\u2019s current ranking on the leaderboard."),(0,a.kt)("li",{parentName:"ul"},"badge: String noting any of the user's earned achievements or medals.")),(0,a.kt)("h2",{id:"petpal"},"PetPal"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"PetID: Unique identifier assigned to each virtual pet in the application."),(0,a.kt)("li",{parentName:"ul"},"UserID (fk): Foreign key referencing the User table, denoting the owner of the pet."),(0,a.kt)("li",{parentName:"ul"},"Pet_Name: Represents the name of the virtual pet.")),(0,a.kt)("h2",{id:"pethealthinfo"},"PetHealthInfo"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"PetID (pk): Unique identifier referencing the specific pet whose health information is being recorded."),(0,a.kt)("li",{parentName:"ul"},"petHealth_hungry: String indicating the hunger level of the pet."),(0,a.kt)("li",{parentName:"ul"},"petHealth_bored: String indicating the pet's boredom status."),(0,a.kt)("li",{parentName:"ul"},"last_activity: Timestamp of the most recent activity performed by or with the virtual pet."),(0,a.kt)("li",{parentName:"ul"},"last_recorded_food: String noting the most recent food eaten by the pet.")),(0,a.kt)("h2",{id:"task"},"Task"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"task_type (pk): Represents the unique type of task, such as walking or eating healthy."),(0,a.kt)("li",{parentName:"ul"},"UserID (fk): Foreign key that references the User table, denoting the user who performed the task."),(0,a.kt)("li",{parentName:"ul"},"daily_progress: Integer describing the user's daily progress status for completing the corresponding task.")),(0,a.kt)("h2",{id:"physicalactivity"},"PhysicalActivity"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"task_type (pk): Represents the unique type of physical activity task, such as walking or running."),(0,a.kt)("li",{parentName:"ul"},"steps_taken: Integer noting the number of steps taken during that particular physical activity."),(0,a.kt)("li",{parentName:"ul"},"calories_burned: Integer representing the number of calories burned during the activity."),(0,a.kt)("li",{parentName:"ul"},"last_activity: Timestamp of the user's most recent physical activity."),(0,a.kt)("li",{parentName:"ul"},"recurrence_timer: Timestamp indicating the next scheduled time for a physical activity task."),(0,a.kt)("li",{parentName:"ul"},"record_breaker: Integer indicating whether the user has surpassed their previous task-related records.")),(0,a.kt)("h2",{id:"nutritioninfo"},"NutritionInfo"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"task_type (pk): Represents the unique type of nutrition-related task, such as eating a healthy snack."),(0,a.kt)("li",{parentName:"ul"},"last_recorded_food: String noting the most recent food recognized and recorded by the app."),(0,a.kt)("li",{parentName:"ul"},"count_healthy: Integer noting the number of times healthy food items have been recorded."),(0,a.kt)("li",{parentName:"ul"},"record_breaker: Integer indicating whether the user has surpassed their previous healthy eating records."),(0,a.kt)("li",{parentName:"ul"},"recurrence_timer: Timestamp indicating the next scheduled time for the nutrition-related task."),(0,a.kt)("li",{parentName:"ul"},"count_not_healthy: Integer representing the number of times non-healthy food items have been eaten.")))}p.isMDXComponent=!0}}]);