openapi: 3.0.2
info:
  title: API docs
  description: AR Pet Pals API


servers:
  - url: https://arpetpals.store/

tags:
 
  - name: authentication
    description: API for logging in and logging out
  
  - name: pet-status
    description: API for pet status

  - name: pet-name
    description: API for pet name

  - name: pet-choice
    description: API for pet choice

  - name: user-info
    description: API for user info

  - name: user-name
    description: API for user name


    
  
paths:
  /api/signin:
    post:
      summary: "signin"
      tags:
        - authentication
      requestBody:
        description: "The username and password to sign in"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthSchema"
      responses:
        '200':
          description: "Authentication was successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthSuccess"
        '400':
          description: "Authentication failed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Fail"
  /api/signup:
    post:
      summary: "signup"
      tags:
        - authentication
      requestBody:
        description: "The username and password to sign up"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthSchema"
      responses:
        '200':
          description: "Authentication was successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthSuccess"
        '400':
          description: "Authentication failed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Fail"

  /api/pet/name:
    post:
      security: 
        - token: []
      tags:
        - pet-name
      summary: "update pet name"

      requestBody:
        description: "The new pet's name"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PetName"
      responseBody:
        description: "status of update"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Status"
      responses:
        '200':
          description: "Updated pet name successfuly"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
        '400':
          description: "Could not update pet name"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Fail"
    get:
      security: 
        - token: []
      tags:
        - pet-name  
      summary: "get pet name"
      responseBody:
        description: "the pet's name"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PetName"
      responses:
        '200':
          description: "Got pet name"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PetName"
        '400':
          description: "Couldn't get pet name"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Fail"
  /api/pet/status:
    post:
      security: 
        - token: []
      tags:
        - pet-status
      summary: "update pet status"
      requestBody:
        description: "The new pet's status"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PetStatus"
      responseBody:
        description: "status of update"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Status"
      responses:
        '200':
          description: "Updated pet status successfuly"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
        '400':
          description: "Could not update pet status"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Fail"
    get:
      security: 
        - token: []
      tags: 
        - pet-status
      summary: "get pet status"
     
      responseBody:
        description: "the pet status"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PetStatus"
      responses:
        '200':
          description: "Got pet status successfuly"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PetStatus"
        '400':
          description: "Could not get pet status"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Fail"
  /api/pet/choice:

    post:
      security: 
        - token: []
      tags:
        - pet-choice
      summary: "update pet choice"
      requestBody:
        description: "The new pet's choice"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PetChoice"
      responseBody:
        description: "status of update"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Status"
      responses:
        '200':
          description: "Updated pet choice successfuly"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
        '400':
          description: "Could not update pet choice"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Fail"
    get:
      security: 
        - token: []
      tags: 
        - pet-choice
      summary: "get pet choice"
     
      responseBody:
        description: "the pet choice"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PetChoice"
      responses:
        '200':
          description: "Got pet choice successfuly"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PetChoice"
        '400':
          description: "Could not get pet choice"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Fail"
    
  /api/token/verify:
    post:
      summary: "token validity"

      requestBody:
        description: "The token to test"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyToken"
      responseBody:
        description: "whether token is valid or not"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenValid"
      responses:
        '200':
          description: "Token is valid"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenValid"
        '400':
          description: "Token is not valid"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenValid"
components:
  securitySchemes:
    token:            
      type: http
      scheme: bearer
      bearerFormat: JWT   
  schemas:

    PetStatus:
      type: object
      properties:
        health: int
    PetChoice:
      type: object
      properties:
        choice: string

    PetName:
      type: object
      properties:
        name:
          type: string
    VerifyToken:
      type: object
      properties:
        token: 
          type: string
    AuthSchema:
      type: object
      properties:
        username:
          type: string
          description: "the username to authenticate"
        password:
          type: string
          description: "the password to authenticate"
    TokenValid:
      type: object
      properties:
        isValid: 
          type: boolean

    UserInfo:
      type: object
      properties:
        id: 
          type: string
        name: 
         type: string

    AuthSuccess:
      type: object
      properties:
        token: 
          type: string
          description: "the auth token"
        userInfo:
          type: object
          $ref: "#/components/schemas/UserInfo"
    Fail:
      type: object
      properties:
        message:
          type: string
          description: why it failed

  
    Status:
      type: object
      properties:
        message: 
          type: string
          description: status
        